<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.0.xsd"
	default-autowire="byName" default-lazy-init="true">
	
	<!--这个是队列目的地，点对点的 -->
	<bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>queueDestination</value>
		</constructor-arg>
	</bean>
	<!--这个是sessionAwareQueue目的地 -->
	<bean id="sessionAwareQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>sessionAwareQueue</value>
		</constructor-arg>
	</bean>
	<!--这个是主题目的地，一对多的 -->
	<bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg value="topic" />
	</bean>

	<!-- 消息监听器 -->
	<bean id="consumerMessageListener" class="com.janle.jms.product.listener.ConsumerMessageListener" />
	
	<!-- 可以获取session的MessageListener -->
	<bean id="consumerSessionAwareMessageListener"
		class="com.janle.jms.product.listener.ConsumerSessionAwareMessageListener">
		<property name="destination" ref="queueDestination" />
	</bean>

	<!-- 消息监听容器  配置了事物才会回滚 -->
	<bean id="jmsContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="queueDestination" />
		<property name="messageListener" ref="consumerMessageListener" />
		<!-- 配置这样一个参与分布式事务管理的消息监听容器，我们可以配置一个JtaTransactionManager，当然底层的JMS ConnectionFactory需要能够支持分布式事务管理，
		并正确地注册我们的JtaTransactionManager。这样消息监听器进行消息接收和对应的数据库访问就会处于同一数据库控制下，当消息接收失败或数据库访问失败都会进行事务回滚操作。 -->
		<property name="transactionManager" ref="jtaTransactionManager"/>
		<!-- 事物控制 -->
		<property name="sessionTransacted" value="true"/>
		
	</bean>
	<!-- 消息监听session容器 -->
	<bean id="sessionAwareListenerContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="sessionAwareQueue" />
		<property name="messageListener" ref="consumerSessionAwareMessageListener" />
		<!-- 		<property name="transactionManager" ref="jtaTransactionManager"/> -->
	</bean>


	<!-- 消息监听适配器 -->
	<bean id="messageListenerAdapter"
		class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
		<property name="delegate">
			<bean class="com.janle.jms.product.listener.ConsumerListener" />
		</property>
		<property name="defaultListenerMethod" value="receiveMessage" />
		<property name="defaultResponseDestination" ref="defaultResponseQueue" />
		<!-- <property name="messageConverter" ref="emailMessageConverter"/> -->
		<!-- <property name="messageConverter"> -->
		<!-- <null/> -->
		<!-- </property> -->
	</bean>
	<!-- 消息监听适配器对应的监听容器 -->
	<bean id="messageListenerAdapterContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="adapterQueue" />
		<property name="messageListener" ref="messageListenerAdapter" />
		<!-- 添加事物控制 -->
		<property name="sessionTransacted" value="true" />
	</bean>

	<!-- 用于测试消息监听适配器的队列目的地 -->
	<bean id="adapterQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>adapterQueue</value>
		</constructor-arg>
	</bean>



	<!-- 用于测试消息回复的 -->
	<bean id="responseQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>responseQueue</value>
		</constructor-arg>
	</bean>
	<!-- responseQueue对应的监听器 -->
	<bean id="responseQueueListener" class="com.janle.jms.product.listener.ResponseQueueListener" />

	<!-- responseQueue对应的监听容器 -->
	<bean id="responseQueueMessageListenerContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="responseQueue" />
		<property name="messageListener" ref="responseQueueListener" />
	</bean>



	<!-- defaultResponseQueue对应的监听器 -->
	<bean id="defaultResponseQueueListener"
		class="com.janle.jms.product.listener.DefaultResponseQueueListener" />
	<!-- 默认的消息回复队列 -->
	<bean id="defaultResponseQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>defaultResponseQueue</value>
		</constructor-arg>
	</bean>
	<!-- defaultResponseQueue对应的监听容器 -->
	<bean id="defaultResponseQueueMessageListenerContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="defaultResponseQueue" />
		<property name="messageListener" ref="defaultResponseQueueListener" />
	</bean>


	<!-- 添加了转换器后使用ObjectMessage -->
	<bean id="emailMessageConverter" class="com.janle.jms.converter.EmailMessageConverter" />

</beans>